name: Build & Release Alpha

on:
  push:
    branches:
      - alpha-releases
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0  # Required for proper commit history

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
            distribution: 'temurin'
            java-version: '23'

      - name: Install GitHub CLI
        run: |
      #    echo "‚¨áÔ∏è Installing GitHub CLI..."
      #    sudo apt-get update -qq > /dev/null
      #    type -p curl >/dev/null || sudo apt-get install -qq -y curl > /dev/null
      #    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg 2> /dev/null
      #    sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
      #    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
      #    sudo apt-get update -qq > /dev/null
      #    sudo apt-get install -qq -y gh > /dev/null
      #   echo "‚úÖ GitHub CLI installed"
          gh --version

      - name: Build with Gradle
        run: |
            ./gradlew --build-cache --parallel shadowJar \
              -Dorg.gradle.java.home="$JAVA_HOME_23_X64" \
              -Djava.home="$JAVA_HOME_23_X64"
            ls -lh build/libs/
            echo $JAVA_HOME_23_X64
            echo $JAVA_HOME
        

      - name: Version Bump and Release
        id: versioning
        run: |
          set -x
          echo "üîç Starting version bump process..."
          
          VERSION_FILE="build.gradle"
          PLUGIN_FILE="src/main/resources/paper-plugin.yml"
          
          echo "üìÑ Parsing version from $VERSION_FILE"
          CURRENT_VERSION=$(grep "version\s*=" "$VERSION_FILE" | awk -F"['\"]" '{print $2}')
          [ -z "$CURRENT_VERSION" ] && { echo "‚ùå Could not find version in $VERSION_FILE"; exit 1; }
          echo "‚ÑπÔ∏è Current version: $CURRENT_VERSION"

          if [[ "$CURRENT_VERSION" =~ \.b[0-9]+$ ]]; then
            BASE_VERSION="${CURRENT_VERSION%.b*}"
            BUILD_NUMBER="${CURRENT_VERSION##*.b}"
            NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
            NEW_VERSION="${BASE_VERSION}.b${NEW_BUILD_NUMBER}"
          else
            NEW_VERSION="${CURRENT_VERSION}.b1"
          fi
          echo "üÜï New version: $NEW_VERSION"

          # Update build.gradle
          sed -i.bak "s/version\s*=.*/version = '${NEW_VERSION}'/" "$VERSION_FILE"
          rm -f "${VERSION_FILE}.bak"

          # Update paper-plugin.yml (version only)
          sed -i.bak "s/^version:.*/version: ${NEW_VERSION}/" "$PLUGIN_FILE"
          rm -f "${PLUGIN_FILE}.bak"

          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          
          git add "$VERSION_FILE" "$PLUGIN_FILE"
          if ! git diff --staged --quiet; then
            git commit -m "‚¨ÜÔ∏è Bump version to ${NEW_VERSION}"
            git push "https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git" HEAD:alpha-releases
          fi

          COMMIT_HASH=$(git rev-parse --short HEAD)
          TAG_NAME="${NEW_VERSION}-${COMMIT_HASH}"
          
          JAR_PATH=$(ls build/libs/*-all.jar)
          JAR_NAME="essentials-${NEW_VERSION}.jar"
          mv -v "$JAR_PATH" "build/libs/${JAR_NAME}"

          gh release create "$TAG_NAME" "build/libs/${JAR_NAME}" \
            --title "Alpha Build ${TAG_NAME}" \
            --notes "Automated alpha release from commit ${COMMIT_HASH}" \
            --prerelease \
            --repo "${GITHUB_REPOSITORY}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: essentials
          path: build/libs/*.jar
          if-no-files-found: error
          retention-days: 3
