name: Build & Release Alpha

on:
  push:
    branches:
      - alpha-releases  # Runs on every push to alpha-releases
  workflow_dispatch: # Allows manual runs

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set Up Java (Amazon Corretto)
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '23'

      - name: Build with Gradle ShadowJar
        run: ./gradlew --build-cache --parallel shadowJar

      - name: Bump Version
        run: |
          VERSION_FILE="gradle.properties"
          PLUGIN_FILE="src/main/resources/paper-plugin.yml"

          # Extract the current version from gradle.properties (e.g., 100.6969 or 100.6969.b1)
          CURRENT_VERSION=$(awk -F= '/^version=/ {print $2}' $VERSION_FILE)
          echo "Current version: $CURRENT_VERSION"  # Debugging

          # Check if the version has a build number (bX) or not
          if [[ "$CURRENT_VERSION" =~ \.b[0-9]+$ ]]; then
            # If it has a build number, split into major, minor, and build
            IFS='.' read -r major minor build <<< "$CURRENT_VERSION"
            BUILD_NUMBER=$(echo $build | sed 's/b//')  # Strip the 'b' to get the number
            NEW_BUILD_NUMBER=$((BUILD_NUMBER + 1))
            NEW_BUILD="b${NEW_BUILD_NUMBER}"
            NEW_VERSION="${major}.${minor}.${NEW_BUILD}"
          else
            # If it doesn't have a build number, just append 'b1'
            IFS='.' read -r major minor <<< "$CURRENT_VERSION"
            NEW_BUILD="b1"
            NEW_VERSION="${major}.${minor}.${NEW_BUILD}"
          fi

          echo "New version: ${NEW_VERSION}"  # Debugging

          # Ensure the version is updated in the files
          sed -i "s/^version=.*/version=${NEW_VERSION}/" $VERSION_FILE
          sed -i "s/^version:.*/version: ${NEW_VERSION}/" $PLUGIN_FILE

          # Configure git user for commit
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # Add changes to git
          git add $VERSION_FILE $PLUGIN_FILE

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Bump version to ${NEW_VERSION}"
            git push https://@github.com/Craftefix/essentials.git HEAD:alpha-releases
          fi

          # Get the short commit hash
          COMMIT_HASH=$(git rev-parse --short HEAD)
          echo "Commit hash: $COMMIT_HASH"  # Debugging

          # Create the tag name
          TAG_NAME="${NEW_VERSION}-${COMMIT_HASH}"
          echo "TAG_NAME: $TAG_NAME"

          # Create the alpha release
          gh release create "$TAG_NAME" build/libs/*.zip \
            --title "Alpha Build $TAG_NAME" \
            --notes "Automated alpha release from commit $COMMIT_HASH" \
            --prerelease --draft --repo ${{ github.repository }}

          # Upload the artifact with the new version naming
          JAR_NAME="essentials_${NEW_VERSION}.jar"
          mv build/libs/*.jar build/libs/$JAR_NAME
          echo "Uploading JAR: $JAR_NAME"
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Corretto_jdk/23/x64
          JAVA_HOME_23_X64: /opt/hostedtoolcache/Java_Corretto_jdk/23/x64
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: essentials-beta
          path: build/libs/*.zip
